{"version":3,"sources":["logo.png","components/Navigation.js","components/Header.js","components/Services/Base.js","components/Services/TriggerQueue.js","components/Services/Services.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Navigation","react_default","a","createElement","navbar","className","Classes","DARK","navbarGroup","align","Alignment","LEFT","navbarHeading","RIGHT","buttons","href","text","target","minimal","rightIcon","Component","opts","playerVars","autoplay","Header","card","CENTER","src","logo","alt","HEADING","YouTube","videoId","Base","icon","TriggerQueue","Base_Base","Test","SERVICES","id","title","panel","TriggerQueue_TriggerQueue","Services","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleTabChange","activeTabID","setState","state","find","s","tabs","onChange","selectedTabId","vertical","map","tab","assign","key","App","Navigation_Navigation","components_Header","Services_Services","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bcb6b03c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.123f2f08.png\";","import React, { Component } from \"react\";\n\nimport {\n  Alignment,\n  AnchorButton,\n  Classes,\n  Navbar,\n  NavbarGroup,\n  NavbarHeading\n} from \"@blueprintjs/core\";\n\nexport default class Navigation extends Component {\n  render() {\n    return (\n      <Navbar className={Classes.DARK}>\n        <NavbarGroup align={Alignment.LEFT}>\n          <NavbarHeading>Smart-Chef*</NavbarHeading>\n        </NavbarGroup>\n        <NavbarGroup align={Alignment.RIGHT}>\n          <AnchorButton\n            href=\"http://blueprintjs.com/docs/v2/\"\n            text=\"Docs\"\n            target=\"_blank\"\n            minimal\n            rightIcon=\"share\"\n          />\n          <AnchorButton\n            href=\"https://github.com/Smart-Chef\"\n            text=\"Github\"\n            target=\"_blank\"\n            minimal\n            rightIcon=\"code\"\n          />\n        </NavbarGroup>\n      </Navbar>\n    );\n  }\n}\n","import React from \"react\";\nimport { Alignment, Card, Classes } from \"@blueprintjs/core\";\nimport YouTube from \"react-youtube\";\n\nimport logo from \"../logo.png\";\nconst opts = {\n  // height: '100%',\n  // width: '100%',\n  playerVars: { // https://developers.google.com/youtube/player_parameters\n    autoplay: 0\n  }\n};\n\nfunction Header() {\n  return (\n    <Card className=\"app-card header\">\n      <div align={Alignment.CENTER}>\n        <div className=\"logo-container\">\n          <img src={logo} className=\"App-logo\" alt=\"Smart-Chef* logo\" />\n        </div>\n      </div>\n      <div className=\"info-text\">\n        <div className=\"app-header\" align={Alignment.CENTER}>\n          <h1 className={Classes.HEADING}>Smart-Chef*</h1>\n        </div>\n        <p>\n          We created a countertop induction cooker with safety features,\n          automatic measurements, digitized recipes, and walkthroughs with voice\n          and sensor-driven events.\n        </p>\n        <YouTube videoId=\"NHrZG0arjOg\" opts={opts} />\n      </div>\n    </Card>\n  );\n}\n\nexport default Header;\n","import React, { Component } from \"react\";\nimport { AnchorButton } from \"@blueprintjs/core\";\n\nexport default class Base extends Component {\n  render() {\n    return (\n      <div>\n        <AnchorButton\n          href=\"https://github.com/Smart-Chef\"\n          text=\"Repo\"\n          target=\"_blank\"\n          icon=\"git-repo\"\n        />\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport Base from \"./Base\";\n\nexport default class TriggerQueue extends Component {\n  render() {\n    return <Base />;\n  }\n}\n","import React, { Component } from \"react\";\nimport { Alignment, Card, Tab, Tabs } from \"@blueprintjs/core\";\nimport TriggerQueue from \"./TriggerQueue\";\nimport * as Classes from \"@blueprintjs/core/lib/esm/common/classes\";\nimport Base from \"./Base\";\n\nfunction Test() {\n  return <Base />;\n}\nconst SERVICES = [\n  {\n    id: \"overview\",\n    title: \"Overview\",\n    panel: <Test />\n  },\n  {\n    id: \"trigger-queue\",\n    title: \"Trigger Queue\",\n    panel: <TriggerQueue />\n  },\n  {\n    id: \"recipe-walkthrough\",\n    title: \"Recipe Walkthrough\",\n    panel: <Test />\n  },\n  {\n    id: \"scale-driver\",\n    title: \"Scale Driver\",\n    panel: <Test />\n  },\n  {\n    id: \"range-ble-driver\",\n    title: \"Thermometer BLE Driver\",\n    panel: <Test />\n  },\n  {\n    id: \"nlp\",\n    title: \"Natural Language Processing\",\n    panel: <Test />\n  },\n  {\n    id: \"mobile-app\",\n    title: \"Mobile App\",\n    panel: <Test />\n  },\n  {\n    id: \"admin-portal\",\n    title: \"Admin Portal\",\n    panel: <Test />\n  },\n  {\n    id: \"home-page\",\n    title: \"Home Page\",\n    panel: <Test />\n  }\n];\n\nexport default class Services extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeTabID: \"overview\"\n    };\n  }\n\n  handleTabChange = activeTabID => {\n    this.setState({\n      activeTabID\n    });\n  };\n\n  render() {\n    const { activeTabID } = this.state;\n    return (\n      <Card className=\"app-card services\">\n        <div className=\"app-header\" align={Alignment.CENTER}>\n          <h2 className={Classes.HEADING}>\n            {SERVICES.find(s => s.id === activeTabID).title}\n          </h2>\n        </div>\n        <Tabs\n          id=\"ServiceTabs\"\n          onChange={this.handleTabChange}\n          selectedTabId={activeTabID}\n          vertical\n        >\n          <h4 className={Classes.HEADING}>Services</h4>\n          {SERVICES.map(s => (\n            <Tab key={s.id} {...s} />\n          ))}\n        </Tabs>\n      </Card>\n    );\n  }\n}\n","import React, { Component } from \"react\";\n\nimport \"./App.scss\";\nimport { Navigation, Header, Services } from \"./components\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Navigation />\n        <Header />\n        <Services />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}